{
  "swagger": "2.0",
  "info": {
    "description": "Auto Mart is an online marketplace for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.",
    "version": "1.0.0",
    "title": "AutoMart API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "okoyecb@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "https://automart-okoyecb.herokuapp.com/",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API Endpoints for users on the Platform"
    },
    {
      "name": "Cars",
      "description": "API Endpoints for cars on the platform"
    },
    {
      "name": "Orders",
      "description": "API Endpoints for User Purchase order"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Registers a new user on the platform",
        "description": "",
        "operationId": "signupUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "All required details from the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Signin an existing user on the platform",
        "description": "",
        "operationId": "signinUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Email and password of the Existing user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sign in Successful"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/car": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Creates a new car post",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "car",
            "description": "Details of the created advert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Car Advert successfully created"
          }
        }
      },
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "Retrieves all cars on platform",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "car",
            "description": "Details of the created advert",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cars retrieved successfully created"
          }
        }
      }
    },
    "/car/:id": {
      "get": {
        "tags": [
          "Cars"
        ],
        "description": "Get the cars within this filter",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Available || Sold",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved car"
          },
          "404": {
            "description": "Car not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Delete a Specified car",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "car",
            "description": "Delete a Specified car",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car deleted successfully"
          },
          "404": {
            "description": "Car doesn't exist"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Update car status",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "car",
            "description": "Update car status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cars"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Car Status Updated successfully"
          },
          "404": {
            "description": "Car not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Orders"
        ],
        "description": "Create a Purchase Order",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "New Offer",
            "schema": {
              "$ref": "#/definitions/Orders"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/order/:id": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a specific account",
        "description": "N.B - a client can get only his/her account while a staff can get all accounts",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update a Specific Purchase Order",
        "description": "A user should be able to Update the purchase order",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Order Updated successfully"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "description": "JWT token is received after registering/login, input format: \"Bearer \\<token\\>\"",
      "name": "token",
      "in": "header"
    }
  },
  "definitions": {
    "Cars": {
      "type": "object",
      "required": [
        "id",
        "owner",
        "created_on",
        "state",
        "status",
        "price",
        "manufacturer",
        "model",
        "body_type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 1002
        },
        "owner": {
          "type": "string",
          "example": "Chidi Okoye"
        },
        "created_on": {
          "type": "number",
          "example": "Wed May 22 09:13:52 2019 UTC"
        },
        "state": {
          "type": "string",
          "example": "New"
        },
        "status": {
          "type": "string",
          "example": "available"
        },
        "price": {
          "type": "number",
          "example": 13000000
        },
        "manufacturer": {
          "type": "string",
          "example": "Toyota"
        },
        "model": {
          "type": "string",
          "example": "Yaris"
        },
        "body_type": {
          "type": "string",
          "example": "sedan"
        }
      }
    },
    "Users": {
      "type": "object",
      "required": [
        "id",
        "first_name",
        "last_name",
        "email",
        "password",
        "address",
        "is_admin"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "example": "Chidi"
        },
        "last_name": {
          "type": "string",
          "example": "Okoye"
        },
        "email": {
          "type": "string",
          "example": "okoyecb@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "qwerty"
        },
        "address": {
          "type": "string",
          "example": "40 Kairu street"
        },
        "is_admin": {
          "type": "string",
          "example": false
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Orders": {
      "type": "object",
      "required": [
        "id",
        "buyer",
        "car-id",
        "created_on",
        "status",
        "price",
        "price_offered"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": 12
        },
        "buyer": {
          "type": "string",
          "example": "Michael Ajayi"
        },
        "car-id": {
          "type": "integer",
          "example": 100
        },
        "created_on": {
          "type": "number",
          "example": "Wed May 22 09:13:52 2019 UTC"
        },
        "status": {
          "type": "string",
          "example": "pending"
        },
        "price": {
          "type": "number",
          "example": 180000
        },
        "price_offered": {
          "type": "number",
          "example": 150000
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}